/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bioapp;

import java.awt.Color;
import java.awt.Component;
import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFSheetConditionalFormatting;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.util.SheetBuilder;

/**
 *
 * @author Haitham
 */
public class StartFrame extends javax.swing.JFrame {

    private static final int INTEGER = 0;
    private static final int FLOATING_POINT = 1;

    /**
     * Creates new form StartFrame
     */
    public StartFrame() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(StartFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(StartFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(StartFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(StartFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.setIconImage(loadImageIcon("dog_small.png").getImage());
        this.setLocationByPlatform(true);
        initComponents();
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
    }

    /**
     * Returns an ImageIcon, or null if the path was invalid.
     */
    private static ImageIcon loadImageIcon(String path) {
        URL imgURL = StartFrame.class.getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL);
        } else {
            System.err.println("Couldn't find file: " + path);
            return null;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        backgroundPanel = new javax.swing.JPanel();
        tablePanel = new javax.swing.JPanel();
        scrollPane = new javax.swing.JScrollPane();
        resultsTable = new javax.swing.JTable();
        searchCriteriaPanel = new javax.swing.JPanel();
        rightPanel = new javax.swing.JPanel();
        impactComboBox = new javax.swing.JComboBox<>();
        impactLabel = new javax.swing.JLabel();
        saveResultsButton = new javax.swing.JButton();
        resetAllButton = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        chromosomeLabel = new javax.swing.JLabel();
        chromosomeComboBox = new javax.swing.JComboBox<>();
        positionLabel = new javax.swing.JLabel();
        positionFromFormattedTextField = new javax.swing.JFormattedTextField();
        positionToFormattedTextField = new javax.swing.JFormattedTextField();
        featureTypeLabel = new javax.swing.JLabel();
        featureTypeComboBox = new javax.swing.JComboBox<>();
        transcriptIdLabel = new javax.swing.JLabel();
        transcriptIdTextField = new javax.swing.JTextField();
        geneNameLabel = new javax.swing.JLabel();
        geneNameTextField = new javax.swing.JTextField();
        geneBiotypeLabel = new javax.swing.JLabel();
        geneBiotypeComboBox = new javax.swing.JComboBox<>();
        annDbLabel = new javax.swing.JLabel();
        annDbComboBox = new javax.swing.JComboBox<>();
        consequenceLabel = new javax.swing.JLabel();
        consequenceComboBox = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        breedLabel = new javax.swing.JLabel();
        breedComboBox = new javax.swing.JComboBox<>();
        variantLabel = new javax.swing.JLabel();
        variantComboBox = new javax.swing.JComboBox<>();
        freqCasesLabel = new javax.swing.JLabel();
        freqCasesFromFormattedTextField = new javax.swing.JFormattedTextField();
        freqCasesToFormattedTextField = new javax.swing.JFormattedTextField();
        freqCasesCheckBox = new javax.swing.JCheckBox();
        freqControlsLabel = new javax.swing.JLabel();
        freqControlsFromFormattedTextField = new javax.swing.JFormattedTextField();
        freqControlsToFormattedTextField = new javax.swing.JFormattedTextField();
        freqControlsCheckBox = new javax.swing.JCheckBox();
        minFreqDiffLabel = new javax.swing.JLabel();
        minFreqDiffFormattedTextField = new javax.swing.JFormattedTextField();
        maxFdrLabel = new javax.swing.JLabel();
        maxFdrFormattedTextField = new javax.swing.JFormattedTextField();
        maxHetCasesLabel = new javax.swing.JLabel();
        maxHetCasesFormattedTextField = new javax.swing.JFormattedTextField();
        noteHetCasesLabel = new javax.swing.JLabel();
        maxHetControlsLabel = new javax.swing.JLabel();
        maxHetControlsFormattedTextField = new javax.swing.JFormattedTextField();
        noteHetControlsLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Dog Explorer");

        tablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Query Result"));

        scrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        scrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        resultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        scrollPane.setViewportView(resultsTable);

        javax.swing.GroupLayout tablePanelLayout = new javax.swing.GroupLayout(tablePanel);
        tablePanel.setLayout(tablePanelLayout);
        tablePanelLayout.setHorizontalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane)
                .addContainerGap())
        );
        tablePanelLayout.setVerticalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                .addContainerGap())
        );

        searchCriteriaPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Search Criteria"));

        rightPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        impactComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Any", "Modifier", "Low", "Moderate", "High", " " }));

        impactLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        impactLabel.setText("Impact");

        saveResultsButton.setText("Save Results");
        saveResultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveResultsButtonActionPerformed(evt);
            }
        });

        resetAllButton.setText("Reset All");
        resetAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetAllButtonActionPerformed(evt);
            }
        });

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout rightPanelLayout = new javax.swing.GroupLayout(rightPanel);
        rightPanel.setLayout(rightPanelLayout);
        rightPanelLayout.setHorizontalGroup(
            rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(resetAllButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(saveResultsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(rightPanelLayout.createSequentialGroup()
                        .addComponent(impactLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(impactComboBox, 0, 163, Short.MAX_VALUE)))
                .addContainerGap())
        );
        rightPanelLayout.setVerticalGroup(
            rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(impactLabel)
                    .addComponent(impactComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(saveResultsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resetAllButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchButton)
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        chromosomeLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        chromosomeLabel.setText("Chromosome");

        chromosomeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Any", "chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7", "chr8", "chr9", "chr10", "chr11", "chr12", "chr13", "chr14", "chr15", "chr16", "chr17", "chr18", "chr19", "chr20", "chr21", "chr22", "chr23", "chr24", "chr25", "chr26", "chr27", "chr28", "chr29", "chr30", "chr31", "chr32", "chr33", "chr34", "chr35", "chr36", "chr37", "chr38", "chrX" }));

        positionLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        positionLabel.setText("Position");

        positionFromFormattedTextField.setBackground(javax.swing.UIManager.getDefaults().getColor("TextField.light"));
        positionFromFormattedTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        positionFromFormattedTextField.setText("from");
        positionFromFormattedTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                positionFromFormattedTextFieldFocusGained(evt);
            }
        });

        positionToFormattedTextField.setBackground(javax.swing.UIManager.getDefaults().getColor("TextField.light"));
        positionToFormattedTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        positionToFormattedTextField.setText("to");
        positionToFormattedTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                positionToFormattedTextFieldFocusGained(evt);
            }
        });

        featureTypeLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        featureTypeLabel.setText("Feature Type");

        featureTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Any", "Transcript", "Intergenic" }));

        transcriptIdLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        transcriptIdLabel.setText("Transcript ID");

        geneNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        geneNameLabel.setText("Gene Name");

        geneBiotypeLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        geneBiotypeLabel.setText("Gene Biotype");

        geneBiotypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Any", "Protein_Coding", "Processed_Pseudogene", "Mt_tRNA", "rRNA", "snRNA", "lincRNA" }));

        annDbLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        annDbLabel.setText("Annotation DB");

        annDbComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Any", "Ensemble", "NCBI" }));

        consequenceLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        consequenceLabel.setText("Consequence");

        consequenceComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Any", "Intron_Variant", "Intergenic_Variant", "Upstream_Gene_Variant", "Downstream_Gene_Variant", "3_Prime_UTR_Variant", "5_Prime_UTR_Variant", "Non-Coding_Transcript_Variant", " " }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(geneNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(geneBiotypeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(annDbLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(consequenceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(featureTypeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(positionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(chromosomeLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(transcriptIdLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(positionFromFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(positionToFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(featureTypeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(transcriptIdTextField)
                    .addComponent(geneNameTextField)
                    .addComponent(consequenceComboBox, 0, 1, Short.MAX_VALUE)
                    .addComponent(annDbComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(geneBiotypeComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chromosomeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {positionFromFormattedTextField, positionToFormattedTextField});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chromosomeLabel)
                    .addComponent(chromosomeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(positionLabel)
                    .addComponent(positionFromFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(positionToFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(featureTypeLabel)
                    .addComponent(featureTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(transcriptIdLabel)
                    .addComponent(transcriptIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(geneNameLabel)
                    .addComponent(geneNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(geneBiotypeLabel)
                    .addComponent(geneBiotypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(annDbComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(annDbLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(consequenceLabel)
                    .addComponent(consequenceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        breedLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        breedLabel.setText("Breed");

        breedComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Any", "Bulldog_English", "Newfoundland", "Rottweiler", "Toller", "Boxer", "Labrador_Retriever", "Weimaraner", "Golden_Retriever", "Whippet", "Pug" }));

        variantLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        variantLabel.setText("Variant");

        variantComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Any", "snps", "indels" }));

        freqCasesLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        freqCasesLabel.setText("Frequency in Cases");

        freqCasesFromFormattedTextField.setBackground(javax.swing.UIManager.getDefaults().getColor("TextField.light"));
        freqCasesFromFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        freqCasesFromFormattedTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        freqCasesFromFormattedTextField.setText("0.25");
        freqCasesFromFormattedTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                freqCasesFromFormattedTextFieldFocusGained(evt);
            }
        });

        freqCasesToFormattedTextField.setBackground(javax.swing.UIManager.getDefaults().getColor("TextField.light"));
        freqCasesToFormattedTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        freqCasesToFormattedTextField.setText("0.75");
        freqCasesToFormattedTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                freqCasesToFormattedTextFieldFocusGained(evt);
            }
        });

        freqCasesCheckBox.setSelected(true);
        freqCasesCheckBox.setText("Inverse");

        freqControlsLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        freqControlsLabel.setText("Frequency in Controls");

        freqControlsFromFormattedTextField.setBackground(javax.swing.UIManager.getDefaults().getColor("TextField.light"));
        freqControlsFromFormattedTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        freqControlsFromFormattedTextField.setText("0.25");
        freqControlsFromFormattedTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                freqControlsFromFormattedTextFieldFocusGained(evt);
            }
        });

        freqControlsToFormattedTextField.setBackground(javax.swing.UIManager.getDefaults().getColor("TextField.light"));
        freqControlsToFormattedTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        freqControlsToFormattedTextField.setText("0.75");
        freqControlsToFormattedTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                freqControlsToFormattedTextFieldFocusGained(evt);
            }
        });

        freqControlsCheckBox.setText("Inverse");

        minFreqDiffLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        minFreqDiffLabel.setText("Min. Frequency Diff.");

        minFreqDiffFormattedTextField.setBackground(javax.swing.UIManager.getDefaults().getColor("TextField.light"));
        minFreqDiffFormattedTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        minFreqDiffFormattedTextField.setText("0.05");
        minFreqDiffFormattedTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                minFreqDiffFormattedTextFieldFocusGained(evt);
            }
        });

        maxFdrLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        maxFdrLabel.setText("Max. False Discovery Rate");

        maxFdrFormattedTextField.setBackground(javax.swing.UIManager.getDefaults().getColor("TextField.light"));
        maxFdrFormattedTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        maxFdrFormattedTextField.setText("to");
        maxFdrFormattedTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                maxFdrFormattedTextFieldFocusGained(evt);
            }
        });

        maxHetCasesLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        maxHetCasesLabel.setText("Max. heterozygous in Cases ");

        maxHetCasesFormattedTextField.setBackground(javax.swing.UIManager.getDefaults().getColor("TextField.light"));
        maxHetCasesFormattedTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        maxHetCasesFormattedTextField.setText("to");
        maxHetCasesFormattedTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                maxHetCasesFormattedTextFieldFocusGained(evt);
            }
        });

        noteHetCasesLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        noteHetCasesLabel.setText("Use -1 for no maximum");

        maxHetControlsLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        maxHetControlsLabel.setText("Max. heterozygous in Controls");

        maxHetControlsFormattedTextField.setBackground(javax.swing.UIManager.getDefaults().getColor("TextField.light"));
        maxHetControlsFormattedTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        maxHetControlsFormattedTextField.setText("to");
        maxHetControlsFormattedTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                maxHetControlsFormattedTextFieldFocusGained(evt);
            }
        });

        noteHetControlsLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        noteHetControlsLabel.setText("Use -1 for no maximum");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(breedLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(variantLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(freqCasesLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(freqControlsLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(minFreqDiffLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(maxFdrLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(maxHetCasesLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxHetControlsLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(breedComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(freqControlsFromFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(freqControlsToFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(minFreqDiffFormattedTextField)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(variantComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(freqCasesFromFormattedTextField)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(freqCasesToFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(1, 1, 1))
                    .addComponent(maxFdrFormattedTextField)
                    .addComponent(maxHetCasesFormattedTextField)
                    .addComponent(maxHetControlsFormattedTextField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(noteHetCasesLabel)
                    .addComponent(noteHetControlsLabel)
                    .addComponent(freqControlsCheckBox)
                    .addComponent(freqCasesCheckBox))
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {breedLabel, freqCasesLabel, freqControlsLabel, maxFdrLabel, maxHetCasesLabel, maxHetControlsLabel, minFreqDiffLabel, variantLabel});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {freqCasesFromFormattedTextField, freqCasesToFormattedTextField});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {freqCasesCheckBox, freqControlsCheckBox, noteHetCasesLabel, noteHetControlsLabel});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(breedLabel)
                    .addComponent(breedComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(variantLabel)
                    .addComponent(variantComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(freqCasesLabel)
                    .addComponent(freqCasesFromFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(freqCasesToFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(freqCasesCheckBox))
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(freqControlsLabel)
                    .addComponent(freqControlsFromFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(freqControlsToFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(freqControlsCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minFreqDiffLabel)
                    .addComponent(minFreqDiffFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxFdrLabel)
                    .addComponent(maxFdrFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxHetCasesLabel)
                    .addComponent(maxHetCasesFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noteHetCasesLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxHetControlsLabel)
                    .addComponent(maxHetControlsFormattedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noteHetControlsLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout searchCriteriaPanelLayout = new javax.swing.GroupLayout(searchCriteriaPanel);
        searchCriteriaPanel.setLayout(searchCriteriaPanelLayout);
        searchCriteriaPanelLayout.setHorizontalGroup(
            searchCriteriaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchCriteriaPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rightPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        searchCriteriaPanelLayout.setVerticalGroup(
            searchCriteriaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchCriteriaPanelLayout.createSequentialGroup()
                .addGroup(searchCriteriaPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rightPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout backgroundPanelLayout = new javax.swing.GroupLayout(backgroundPanel);
        backgroundPanel.setLayout(backgroundPanelLayout);
        backgroundPanelLayout.setHorizontalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchCriteriaPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        backgroundPanelLayout.setVerticalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchCriteriaPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void freqCasesFromFormattedTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_freqCasesFromFormattedTextFieldFocusGained
        focusGainedAction(freqCasesFromFormattedTextField, true);
    }//GEN-LAST:event_freqCasesFromFormattedTextFieldFocusGained

    private void freqCasesToFormattedTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_freqCasesToFormattedTextFieldFocusGained
        focusGainedAction(freqCasesToFormattedTextField, true);
    }//GEN-LAST:event_freqCasesToFormattedTextFieldFocusGained

    private void freqControlsFromFormattedTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_freqControlsFromFormattedTextFieldFocusGained
        focusGainedAction(freqControlsFromFormattedTextField, true);
    }//GEN-LAST:event_freqControlsFromFormattedTextFieldFocusGained

    private void freqControlsToFormattedTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_freqControlsToFormattedTextFieldFocusGained
        focusGainedAction(freqControlsToFormattedTextField, true);
    }//GEN-LAST:event_freqControlsToFormattedTextFieldFocusGained

    private void maxFdrFormattedTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_maxFdrFormattedTextFieldFocusGained
        focusGainedAction(maxFdrFormattedTextField, true);
    }//GEN-LAST:event_maxFdrFormattedTextFieldFocusGained

    private void maxHetCasesFormattedTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_maxHetCasesFormattedTextFieldFocusGained
        focusGainedAction(maxHetCasesFormattedTextField, false);
    }//GEN-LAST:event_maxHetCasesFormattedTextFieldFocusGained

    private void maxHetControlsFormattedTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_maxHetControlsFormattedTextFieldFocusGained
        focusGainedAction(maxHetControlsFormattedTextField, false);
    }//GEN-LAST:event_maxHetControlsFormattedTextFieldFocusGained

    private void positionFromFormattedTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_positionFromFormattedTextFieldFocusGained
        focusGainedAction(positionFromFormattedTextField, false);
    }//GEN-LAST:event_positionFromFormattedTextFieldFocusGained

    private void positionToFormattedTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_positionToFormattedTextFieldFocusGained
        focusGainedAction(positionToFormattedTextField, false);
    }//GEN-LAST:event_positionToFormattedTextFieldFocusGained

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        try {
            executeQuery();
        } catch (SQLException ex) {
            Logger.getLogger(StartFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(StartFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void minFreqDiffFormattedTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_minFreqDiffFormattedTextFieldFocusGained
        focusGainedAction(minFreqDiffFormattedTextField, true);
    }//GEN-LAST:event_minFreqDiffFormattedTextFieldFocusGained

    private void saveResultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveResultsButtonActionPerformed
        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                saveTableToExcel(resultsTable, fileChooser.getSelectedFile().getPath() + ".xls");
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex.toString());
                Logger.getLogger(StartFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_saveResultsButtonActionPerformed

    private void resetAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetAllButtonActionPerformed
        resetAll();
    }//GEN-LAST:event_resetAllButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StartFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StartFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StartFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StartFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StartFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> annDbComboBox;
    private javax.swing.JLabel annDbLabel;
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JComboBox<String> breedComboBox;
    private javax.swing.JLabel breedLabel;
    private javax.swing.JComboBox<String> chromosomeComboBox;
    private javax.swing.JLabel chromosomeLabel;
    private javax.swing.JComboBox<String> consequenceComboBox;
    private javax.swing.JLabel consequenceLabel;
    private javax.swing.JComboBox<String> featureTypeComboBox;
    private javax.swing.JLabel featureTypeLabel;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JCheckBox freqCasesCheckBox;
    private javax.swing.JFormattedTextField freqCasesFromFormattedTextField;
    private javax.swing.JLabel freqCasesLabel;
    private javax.swing.JFormattedTextField freqCasesToFormattedTextField;
    private javax.swing.JCheckBox freqControlsCheckBox;
    private javax.swing.JFormattedTextField freqControlsFromFormattedTextField;
    private javax.swing.JLabel freqControlsLabel;
    private javax.swing.JFormattedTextField freqControlsToFormattedTextField;
    private javax.swing.JComboBox<String> geneBiotypeComboBox;
    private javax.swing.JLabel geneBiotypeLabel;
    private javax.swing.JLabel geneNameLabel;
    private javax.swing.JTextField geneNameTextField;
    private javax.swing.JComboBox<String> impactComboBox;
    private javax.swing.JLabel impactLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JFormattedTextField maxFdrFormattedTextField;
    private javax.swing.JLabel maxFdrLabel;
    private javax.swing.JFormattedTextField maxHetCasesFormattedTextField;
    private javax.swing.JLabel maxHetCasesLabel;
    private javax.swing.JFormattedTextField maxHetControlsFormattedTextField;
    private javax.swing.JLabel maxHetControlsLabel;
    private javax.swing.JFormattedTextField minFreqDiffFormattedTextField;
    private javax.swing.JLabel minFreqDiffLabel;
    private javax.swing.JLabel noteHetCasesLabel;
    private javax.swing.JLabel noteHetControlsLabel;
    private javax.swing.JFormattedTextField positionFromFormattedTextField;
    private javax.swing.JLabel positionLabel;
    private javax.swing.JFormattedTextField positionToFormattedTextField;
    private javax.swing.JButton resetAllButton;
    private javax.swing.JTable resultsTable;
    private javax.swing.JPanel rightPanel;
    private javax.swing.JButton saveResultsButton;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JButton searchButton;
    private javax.swing.JPanel searchCriteriaPanel;
    private javax.swing.JPanel tablePanel;
    private javax.swing.JLabel transcriptIdLabel;
    private javax.swing.JTextField transcriptIdTextField;
    private javax.swing.JComboBox<String> variantComboBox;
    private javax.swing.JLabel variantLabel;
    // End of variables declaration//GEN-END:variables

    private void executeQuery() throws SQLException, ClassNotFoundException {
        // Prepare breed condition
        String breedCondition = prepareComboBoxIgnoreCaseCondition(breedComboBox, "assoc.breed", "any");
        // Prepare var_type
        String varTypeCondition = prepareComboBoxIgnoreCaseCondition(variantComboBox, "assoc.var_type", "any");
        // Prepare f_a condition
        String freqCasesCondition = prepareFromToCondition(freqCasesFromFormattedTextField, freqCasesToFormattedTextField, freqCasesCheckBox, "assoc.f_a", FLOATING_POINT);
        // Prepare f_u condition
        String freqControlsCondition = prepareFromToCondition(freqControlsFromFormattedTextField, freqControlsToFormattedTextField, freqControlsCheckBox, "assoc.f_u", FLOATING_POINT);
        // Apply minDiff
        String minDiffCondition = prepareFreqMinDiffCondition();
        // Prepare fdr condition
        String fdrCondition = prepareTextFieldMaxCondition(maxFdrFormattedTextField, "assoc.fdr", FLOATING_POINT);
//        // Prepare aff_alt condition
//        String affAltCondition = prepareFromToCondition(affAltFromFormattedTextField, affAltToFormattedTextField, "assoc.aff_alt", INTEGER);
        // Prepare aff_het condition
        String maxHetCasesCondition = prepareTextFieldMaxCondition(maxHetCasesFormattedTextField, "assoc.aff_het", INTEGER);
//        // Prepare aff_ref condition
//        String affRefCondition = prepareFromToCondition(affRefFromFormattedTextField, affRefToFormattedTextField, "assoc.aff_ref", INTEGER);
//        // Prepare unaff_alt condition
//        String unaffAltCondition = prepareFromToCondition(unaffAltFromFormattedTextField, unaffAltToFormattedTextField, "assoc.unaff_alt", INTEGER);
        // Prepare unaff_het condition
        String maxHetControlsCondition = prepareTextFieldMaxCondition(maxHetControlsFormattedTextField, "assoc.unaff_het", INTEGER);
//        // Prepare unaff_ref condition
//        String unaffRefCondition = prepareFromToCondition(unaffRefFromFormattedTextField, unaffRefToFormattedTextField, "assoc.unaff_ref", INTEGER);
        // Prepare breed condition
        String chromosomeCondition = prepareComboBoxIgnoreCaseCondition(chromosomeComboBox, "vcf_info.chrom", "any");
        // Prepare position condition
        String posCondition = prepareFromToCondition(positionFromFormattedTextField, positionToFormattedTextField, null, "vcf_info.pos", INTEGER);
//        // Prepare gene condition
//        String geneCondition = prepareTextFieldIgnoreCaseCondition(geneTextField, "var_effect.gene", "");
        // Prepare feature condition
        String featureCondition = prepareTextFieldIgnoreCaseCondition(transcriptIdTextField, "var_effect.feature", "");
        // Prepare feature_type condition
        String featureTypeCondition = prepareComboBoxIgnoreCaseCondition(featureTypeComboBox, "var_effect.feature_type", "any");
        // Prepare consequence condition
        String consequenceCondition = prepareComboBoxIgnoreCaseCondition(consequenceComboBox, "var_effect.consequence", "any");
        // Prepare gene_name condition
        String geneNameCondition = prepareTextFieldIgnoreCaseCondition(geneNameTextField, "trans_info.gene_name", "");
        // Prepare gene_biotype condition
        String geneBiotypeCondition = prepareComboBoxIgnoreCaseCondition(geneBiotypeComboBox, "trans_info.gene_biotype", "any");
        // Prepare ann_db
        String annDbCondition = prepareComboBoxIgnoreCaseCondition(annDbComboBox, "var_effect.ann_db", "any");

        // Compose query
        String query = "SELECT\n"
                + "assoc.breed, assoc.var_type, \n"
                + "vcf_info.chrom, vcf_info.pos, vcf_info.id, vcf_info.ref, vcf_info.alt, \n"
                + "assoc.f_a, assoc.f_u, assoc.fdr, assoc.aff_alt, assoc.aff_het, assoc.aff_ref, assoc.unaff_alt, assoc.unaff_het, assoc.unaff_ref, \n"
                + "var_effect.gene, \n"
                + "var_effect.ann_db, var_effect.feature, var_effect.feature_type, var_effect.consequence, var_effect.cdna_position, var_effect.cds_position, var_effect.protein_position, var_effect.amino_acids, var_effect.codons, var_effect.extra,\n"
                + "trans_info.gene_name, trans_info.gene_biotype, trans_info.description\n"
                + "FROM\n"
                + "assoc, vcf_info, var_effect LEFT OUTER JOIN trans_info ON var_effect.feature = trans_info.transcript_id\n"
                + "WHERE\n"
                + "assoc.location = vcf_info.location and\n"
                + "assoc.location = var_effect.location"
                + breedCondition
                + varTypeCondition
                + freqCasesCondition
                + freqControlsCondition
                + minDiffCondition
                + fdrCondition
                //+ affAltCondition
                + maxHetCasesCondition
                //+ affRefCondition
                //+ unaffAltCondition
                + maxHetControlsCondition
                //+ unaffRefCondition
                + chromosomeCondition
                + posCondition
                //+ geneCondition
                + featureCondition
                + featureTypeCondition
                + consequenceCondition
                + geneNameCondition
                + geneBiotypeCondition
                + annDbCondition
                + ";";

//        String query = "select\n"
//                + "assoc.breed,\n"
//                + "assoc.var_type, \n"
//                + "#vcf_info.location, \n"
//                + "vcf_info.chrom, vcf_info.pos, vcf_info.id, vcf_info.ref, vcf_info.alt,\n"
//                + "assoc.f_a, assoc.f_u, assoc.fdr, assoc.aff_alt, assoc.aff_het, assoc.aff_ref, assoc.unaff_alt, assoc.unaff_het, assoc.unaff_ref,\n"
//                + "trans_info.gene_name, \n"
//                + "var_effect.ann_db, var_effect.feature_name, var_effect.feature_type, var_effect.consequence, var_effect.cdna_position, var_effect.cds_position, var_effect.protein_position, var_effect.amino_acids, var_effect.codons, var_effect.extra,\n"
//                + "trans_info.associated_gene_name, trans_info.protein_coding, trans_info.description\n"
//                + "from assoc, var_effect, vcf_info, trans_info\n"
//                + "where\n"
//                + "assoc.location = var_effect.location and\n"
//                + "var_effect.location = vcf_info.location and \n"
//                + "var_effect.gene_name = trans_info.gene_name"
//                + breedCondition
//                + varTypeCondition
//                + faCondition
//                + fuCondition
//                + fdrCondition
//                + affAltCondition
//                + affHetCondition
//                + affRefCondition
//                + unaffAltCondition
//                + unaffHetCondition
//                + unaffRefCondition
//                + geneCondition
//                + annDbCondition
//                + ";";
        resultsTable.setModel(DB.getBioDbTableModel(query, impactComboBox.getSelectedItem().toString()));
        resizeColumnWidth(resultsTable);
        resultsTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
    }

    public void resizeColumnWidth(JTable table) {
        final TableColumnModel columnModel = table.getColumnModel();
        for (int column = 0; column < table.getColumnCount(); column++) {
            int width = 50; // Min width
            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer renderer = table.getCellRenderer(row, column);
                Component comp = table.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width + 20, width);
            }
            if (width > 300) {
                width = 300;
            }
            columnModel.getColumn(column).setPreferredWidth(width);
        }
    }

    private void focusGainedAction(
            JFormattedTextField formattedTextField,
            boolean floatFlag) {
        formattedTextField.setText("");
        formattedTextField.setBackground(Color.white);
        if (floatFlag) {
            formattedTextField.setFormatterFactory(
                    new javax.swing.text.DefaultFormatterFactory(
                            new javax.swing.text.NumberFormatter(
                                    new java.text.DecimalFormat("#0.00"))));
        } else {
            formattedTextField.setFormatterFactory(
                    new javax.swing.text.DefaultFormatterFactory(
                            new javax.swing.text.NumberFormatter(
                                    new java.text.DecimalFormat("#0"))));
        }
    }

    private String prepareTextFieldIgnoreCaseCondition(JTextField textField, String colName, String noActionText) {
        if (!textField.getText().trim().equals(noActionText)) {
            return String.format(" and %s = \"%s\"",
                    colName,
                    textField.getText().toLowerCase().trim());
        } else {
            return "";
        }
    }

    private String prepareComboBoxIgnoreCaseCondition(JComboBox<String> comboBox, String colName, String noActionSelection) {
        if (!comboBox.getSelectedItem().toString().toLowerCase().equals(noActionSelection)) {
            // Add an exception for intergenic feature type because it is stored 
            // as a dash in the DB instead of the actual word "intergenic".
            if (comboBox == featureTypeComboBox && comboBox.getSelectedItem().toString().equalsIgnoreCase("intergenic")) {
                // Special case
                return " and var_effect.feature_type = \"-\"";
            } else {
                // General case
                return String.format(" and %s = \"%s\"",
                        colName,
                        comboBox.getSelectedItem().toString().toLowerCase());
            }
        }
        return "";
    }

    private String prepareFromToCondition(
            JFormattedTextField fromFormattedTextField,
            JFormattedTextField toFormattedTextField,
            JCheckBox inverseCheckBox,
            String colName,
            int mode) {
        double fromValue = -1;
        double toValue = -1;
        if (!fromFormattedTextField.getText().trim().equals("") && !fromFormattedTextField.getText().equals("from")) {
            fromValue = Double.parseDouble(fromFormattedTextField.getText());
        }
        if (!toFormattedTextField.getText().trim().equals("") && !toFormattedTextField.getText().equals("to")) {
            toValue = Double.parseDouble(toFormattedTextField.getText());
        }
        if (fromValue != -1 && toValue != -1) {
            switch (mode) {
                case INTEGER:
                    return String.format(" and %s %s between %d and %d",
                            inverseCheckBox == null || !inverseCheckBox.isSelected() ? "" : "not",
                            colName,
                            (int) fromValue,
                            (int) toValue);
                case FLOATING_POINT:
                    return String.format(" and %s %s between %f and %f",
                            inverseCheckBox == null || !inverseCheckBox.isSelected() ? "" : "not",
                            colName,
                            fromValue,
                            toValue);
                default:
                    throw new IllegalArgumentException("mode must be either INTEGER or FLOATING_POINT");
            }
        } else if (fromValue != -1) {
            switch (mode) {
                case INTEGER:
                    return String.format(" and %s >= %d",
                            colName,
                            (int) fromValue);
                case FLOATING_POINT:
                    return String.format(" and %s >= %f",
                            colName,
                            fromValue);
                default:
                    throw new IllegalArgumentException("mode must be either INTEGER or FLOATING_POINT");
            }
        } else if (toValue != -1) {
            switch (mode) {
                case INTEGER:
                    return String.format(" and %s <= %d",
                            colName,
                            (int) toValue);
                case FLOATING_POINT:
                    return String.format(" and %s <= %f",
                            colName,
                            toValue);
                default:
                    throw new IllegalArgumentException("mode must be either INTEGER or FLOATING_POINT");
            }
        } else {
            return "";
        }
    }

    private String prepareTextFieldMaxCondition(
            JFormattedTextField maxTextField,
            String colName,
            int mode) {
        double maxValue = -1;
        if (!maxTextField.getText().trim().equals("") && !maxTextField.getText().equals("to") && !maxTextField.getText().equals("-1")) {
            maxValue = Double.parseDouble(maxTextField.getText());
        }
        if (maxValue != -1) {
            switch (mode) {
                case INTEGER:
                    return String.format(" and %s <= %d",
                            colName,
                            (int) maxValue);
                case FLOATING_POINT:
                    return String.format(" and %s <= %f",
                            colName,
                            maxValue);
                default:
                    throw new IllegalArgumentException("mode must be either INTEGER or FLOATING_POINT");
            }
        } else {
            return "";
        }
    }

    private String prepareFreqMinDiffCondition() {
        double minDiff = 0;
        if (!minFreqDiffFormattedTextField.getText().trim().equals("")) {
            minDiff = Double.parseDouble(minFreqDiffFormattedTextField.getText());
        }
        if (minDiff != 0) {
            return String.format(" and abs(assoc.f_a - assoc.f_u) >= %f", minDiff);
        } else {
            return "";
        }
    }

    private void saveTableToExcel(JTable resultsTable, String excelFileName) throws FileNotFoundException, IOException {
        FileOutputStream fout = null;
        ByteArrayOutputStream outputStream = null;
        try {
            // Create object of FileOutputStream
            fout = new FileOutputStream(excelFileName);
            // Build the Excel File
            outputStream = new ByteArrayOutputStream();
            HSSFWorkbook workBook = new HSSFWorkbook();
            // Create the spreadsheet
            HSSFSheet sheet = workBook.createSheet("DogExplorer");
            // Copy values from the Table to the workbook
            Row row;
            Cell cell;
            for (int i = 0; i < resultsTable.getModel().getRowCount(); i++) {
                row = sheet.createRow(i);
                for (int j = 0; j < resultsTable.getModel().getColumnCount(); j++) {
                    cell = row.createCell(j);
                    //cell.setCellValue((String) resultsTable.getModel().getValueAt(i, j));
                    Object value = resultsTable.getModel().getValueAt(i, j);
                    cell.setCellValue(value == null ? "" : value.toString());
                }
            }
            // Write the actual file
            workBook.write(fout);
            outputStream.writeTo(fout);
        } finally {
            if (outputStream != null) {
                outputStream.close();
            }
            if (fout != null) {
                fout.close();
            }
        }
    }

    private void resetAll() {
        breedComboBox.setSelectedIndex(0);
        variantComboBox.setSelectedIndex(0);
        freqCasesFromFormattedTextField.setText("0.25");
        freqCasesToFormattedTextField.setText("0.75");
        freqControlsFromFormattedTextField.setText("0.25");
        freqControlsToFormattedTextField.setText("0.75");
        minFreqDiffFormattedTextField.setText("0.05");
        maxFdrFormattedTextField.setText("to");
        maxHetCasesFormattedTextField.setText("to");
        maxHetCasesFormattedTextField.setText("to");
        positionFromFormattedTextField.setText("from");
        positionToFormattedTextField.setText("to");
        chromosomeComboBox.setSelectedIndex(0);
        featureTypeComboBox.setSelectedIndex(0);
        transcriptIdTextField.setText("");
        geneNameTextField.setText("");
        geneBiotypeComboBox.setSelectedIndex(0);
        annDbComboBox.setSelectedIndex(0);
        consequenceComboBox.setSelectedIndex(0);
        impactComboBox.setSelectedIndex(0);
    }
}
